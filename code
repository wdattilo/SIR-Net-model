/* SIR-Net model
This code runs the original discrete SIR for many cities connected somehow (plane, buses etc) used in the study: DÃ¡ttilo et al. (2020). COVID-19 most vulnerable Mexican cities lack the public health infrastructure to face the pandemic: a new temporally-explicit model. available on medRxiv - https://www.medrxiv.org/content/10.1101/2020.04.10.20061192v1

BASIC PARAMETERS
Variables descriptions
 S = number os Susceptibles per city
 I = number of Infected per citiy
 R = Number of Recovered per citiy
 Saux, Iaux, Raux = auxiliary variables
 beta, gama = original SIR parameters
 population = base model population (not equal to real population)
 ** In this program all cities have the same population size, called base population stored in variable population
 ** All data regarding population size, susceptible, infected or recovered must be scaled on base population size
 
 NETWORK DATA
 The information of how cities are connected is download from file f1 and stored in variable voos[][]
 voos[i][j] = number os flights departing city i and arriving city j
 
 CITIES RELATED DATA
 The f2 file downloads data regarding local informations:
 pop[i] = population of city i
 uti[i] = icu beds of city i
 the variable bed[i] (number of hospital beds per city) is not used in this version
 
 ANOTHER VARIABLES
 distance = social apartness in %
 It = number of traveling infected
 saturado[i] = time when icu city i collapses
 oc_uti[i] = daily occupation of icu per city
 alpha = fraction of city population that travels in a day
 flag[i] = flag turns into 1 when icu collapses
 
*/

#include <stdio.h>
#include <math.h>
#define cities    100 //number or cities/airports/superorganisms
#define totaltime  600  //maximum simulated time 


double S[cities], I[cities], R[cities], Saux, Iaux, Raux, population, It[cities], bed[cities], oc_uti[cities], distance;
int x, y, i, j, time, voos[cities][cities], flag[cities], pop[cities], uti[cities], saturado[cities];
float alpha, beta, gama;
FILE *f1, *f2;

main()
{
    //open domestic flighs file
    f1=fopen("routes-mexico.txt", "r");
    //open cities file
    f2=fopen ("population_ICU.txt", "r");
    
    //social apartness(%)
    distance=0;
    
    //SIR basic parameters 
    beta=0.245*(100.0-distance)/100.0;
    gama=0.09;
    
    //define alpha and base population
    //see header for base population info
    alpha=0.0001;
    population=100000.0;
    
    //initate all variables = 0
     for (i=0; i<cities; i++) 
     {
         S[i]=population;     // Make Susceptibles=base population
         I[i]=0.0;                    
         R[i]=0.0;                 
         flag[i]=0;                 
         pop[i]=0;
         bed[i]=0.0;
         uti[i]=0;
         oc_uti[i]=0.0;
         saturado[i]=0;
        for (j=0; j<cities; j++) voos[i][j]=0;
     }
    
    //read f1 file  NETWORK
    //x=departing and y=arriving
    while (!feof(f1))
   {
    fscanf (f1, "%d  %d\n", &x, &y);
     voos[x][y]++;
   }
   //close f1 file
   fclose(f1);
   
   //read  f2 file CITY informations
   i=1;
   while (!feof(f2))
   {
      fscanf (f2, "%d  %df\n", &pop[i], &uti[i]);
      i++;
   }
   //close f2 file
   fclose(f2);
   
    // initial infected condition scaled in base population
   // see header for details
     I[15]=6.2;    //Guadalajara
     I[22]=0.9;    //Mexico city
     I[26]=8.8;    //Monterrey
     
    //print initial infected
    printf ("%d  ", 0);
    for (i=1; i<51; i++)
        printf ("%lf         ", 100*I[i]/population);
    printf ("\n");
     
     
     for (time=1; time<totaltime; time++)
     {
        
      //calculate travel factors It
      for (i=1; i<cities; i++)    It[i]=0.0; 
       for (i=1; i<cities; i++)
           for (j=0; j<cities; j++) 
           {
                  It[i]+=alpha*(1.0*voos[j][i])*I[j];
           }
           
        //communitary infections
       Saux=0; Iaux=0; Raux=0;
       for (i=1; i<cities; i++)
       {
       //SIR model
       Saux= S[i] - (beta/population) * S[i] *(I[i]+It[i]);
       Iaux= I[i] + (beta/population )* S[i]* (I[i]+It[i]) - gama*(I[i]+It[i]);
       Raux= R[i] + gama*(I[i]+It[i]);
       if  (Saux<=0.0) 
       {
           Saux=0.0;
           Iaux=population;
       }
       if (Iaux<0) Iaux=0.0;
       S[i]=Saux;
       I[i]=Iaux;
       R[i]=Raux;
       
       //check if ICU occupation (oc_uti[i]) is higher than actual uic beds (uti[i])
       if (flag[i]==0)
       {
       if (time>9) oc_uti[i]=0.9*oc_uti[i];   // 10 days of icu internment 
        oc_uti[i]+=0.005*I[i]/population*pop[i];  //enters on icu 0.5% of infected
       if (oc_uti[i] >= uti[i]) // icu collapses
          {
           flag[i]=1;
           saturado[i]=time;
          }
        }
     }
   
   //print output time x infected 
    printf ("%d  ", time);
    for (i=1; i<51; i++)
        printf (" %lf        ", 100*I[i]/population);
    printf ("\n");
    
  }
  // print uic colapse 
  printf("\noverload  ");
    for (i=1; i<=50; i++)
        printf ("%d  ",saturado[i]);
    printf ("\n"); 
}

/* The output is a space delimited .txt file where lines 1 (day 0) to 600 (day 599) in the first column represent the time in days and from the second column up to 50th represent cities. Values represent the percentage of people infected in each city over time. Line 602, named "overload", represents the day in which each city will overload the number of intensive care beds.  */
